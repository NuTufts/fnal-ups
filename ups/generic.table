#   $RCSfile$
#   $Revision$
#   $Date$
FILE = TABLE
GROUP:

Flavor=ANY
Qualifiers=""
    ACTION = setup
        exeActionRequired("setup__")

# ADD qualified instances here. For examole:
#Flavor=ANY
#Qualifiers="debug"
#    ACTION = setup
#        setupRequired( test_boost -j v1_0 )
#        exeActionRequired("setup__")
#        envSet( XX, yy )

COMMON:
   ACTION = setup__
	# the following is necessary so that both setup and unsetup will work
	execute( test $?shell = 1 || eval 'setenv() { sts=$?; export $1; eval "$1=\"\$2\""; return $sts; };unsetenv() { unset "$@"; }', NO_UPS_ENV )
	if    ( unsetenv _FQ && unset setenv unsetenv )
	    execute( true, NO_UPS_ENV )
	endif ( unsetenv _FQ && unset setenv unsetenv )
	execute( test $?shell = 1 || eval 'setenv() { sts=$?; export $1; eval "$1=\"\$2\""; return $sts; };unsetenv() { unset "$@"; }', NO_UPS_ENV )

	# want to abort if there is a problem found by ups_FQ
	unless    ( setenv _FQ `sh -c 'for dd in ${UPS_PROD_DIR} $UPS_DIR;do ff=$dd/ups/ups_FQ;if [ -x $ff ];then $ff ${UPS_PROD_DIR} ${UPS_PROD_FLAVOR} ${UPS_PROD_QUALIFIERS};exit $?;fi;done'` )
	    sourceRequired( "no_-_DIRECTORY_flavor-qualifier", NO_UPS_ENV )
	endUnless ( setenv _FQ `sh -c 'for dd in ${UPS_PROD_DIR} $UPS_DIR;do ff=$dd/ups/ups_FQ;if [ -x $ff ];then $ff ${UPS_PROD_DIR} ${UPS_PROD_FLAVOR} ${UPS_PROD_QUALIFIERS};exit $?;fi;done'` )

        setupEnv()
        proddir()

	prodDir( _FQ, _FQ )

	pathPrepend(PATH, ${UPS_PROD_DIR}/bin, :)
	pathPrepend(PATH, $${UPS_PROD_NAME_UC}_FQ/bin, :)

	# These are use by other products' build system
	# double(2) double-quotes(") is a bit of trick - ups is enclosing things inside of double quotes so it thinks it can strip off the first and last...
	# double(2) double-quotes(") is needed to be shell independent - to work on cshell or bourne shell
	envSet( ${UPS_PROD_NAME_UC}_INC, ""`sh -c 'for dd in ${${UPS_PROD_NAME_UC}_FQ} ${UPS_PROD_DIR};do for ii in ${UPS_PROD_NAME} inc include h;do [ -d $dd/$ii ] && echo $dd/$ii && exit;done;done'`"" )
	envSet( ${UPS_PROD_NAME_UC}_LIB, ${${UPS_PROD_NAME_UC}_FQ}/lib )

	envPrepend( LD_LIBRARY_PATH, ${${UPS_PROD_NAME_UC}_LIB}, :)
	envPrepend( MANPATH, ${UPS_PROD_DIR}/man, :)
	envPrepend( MANPATH, ${${UPS_PROD_NAME_UC}_FQ}/man, :)

	if    ( test ! -d ${UPS_PROD_DIR}/bin )
	    pathRemove( PATH, ${UPS_PROD_DIR}/bin, :)
	endif ( test ! -d ${UPS_PROD_DIR}/bin )
	if    ( test ! -d ${${UPS_PROD_NAME_UC}_FQ}/bin )
	    pathRemove( PATH, ${${UPS_PROD_NAME_UC}_FQ}/bin, :)
	endif ( test ! -d ${${UPS_PROD_NAME_UC}_FQ}/bin )
	if    ( test ! -d ${${UPS_PROD_NAME_UC}_LIB} )
	    envRemove( LD_LIBRARY_PATH, ${${UPS_PROD_NAME_UC}_LIB}, :)
	endif ( test ! -d ${${UPS_PROD_NAME_UC}_LIB} )
	if    ( test ! -d ${UPS_PROD_DIR}/man )
	    envRemove( MANPATH, ${UPS_PROD_DIR}/man, :)
	endif ( test ! -d ${UPS_PROD_DIR}/man )
	if    ( test ! -d ${${UPS_PROD_NAME_UC}_FQ}/man )
	    envRemove( MANPATH, ${${UPS_PROD_NAME_UC}_FQ}/man, :)
	endif ( test ! -d ${${UPS_PROD_NAME_UC}_FQ}/man )

	# this if is for unsetup, where the "execute" statements do not happen but the if/unless statements do
	if    ( test $?shell = 1 || eval 'setenv() { sts=$?; export $1; eval "$1=\"\$2\""; return $sts; };unsetenv() { unset "$@"; }' )
	    execute( true, NO_UPS_ENV )
	endif ( test $?shell = 1 || eval 'setenv() { sts=$?; export $1; eval "$1=\"\$2\""; return $sts; };unsetenv() { unset "$@"; }' )
	execute( unsetenv _FQ && unset setenv unsetenv, NO_UPS_ENV )

	# ADD common env vars here
END:
